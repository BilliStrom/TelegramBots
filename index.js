const { Telegraf, Markup } = require('telegraf');
const { OpenAI } = require('openai');
const admin = require('firebase-admin');
const Stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const serviceAccount = require('./serviceAccountKey.json'); // –§–∞–π–ª –∏–∑ Firebase Console
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
const mainKeyboard = Markup.keyboard([
  ['/help', '/buy'],
  ['–ú–æ–π —Å—Ç–∞—Ç—É—Å']
]).resize();

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start((ctx) => {
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT-–±–æ—Ç. –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:`,
    mainKeyboard
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.command('help', (ctx) => {
  ctx.reply(
    '‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
    '/buy - –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø\n' +
    '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò',
    mainKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;
  const userId = ctx.from.id;
  
  if (text === '–ú–æ–π —Å—Ç–∞—Ç—É—Å') {
    const userRef = db.collection('users').doc(String(userId));
    const userData = (await userRef.get()).data() || { requests: 0, paid: false };
    return ctx.reply(
      `üìä –í–∞—à —Å—Ç–∞—Ç—É—Å:\n` +
      `–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${userData.requests}/15\n` +
      `–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø: ${userData.paid ? '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}`,
      mainKeyboard
    );
  }

  const userRef = db.collection('users').doc(String(userId));
  const userData = (await userRef.get()).data() || { requests: 0, paid: false };

  if (userData.requests >= 15 && !userData.paid) {
    return ctx.reply(
      'üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:',
      Markup.inlineKeyboard([
        Markup.button.url('üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø', 'https://your-stripe-link.com') // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      ])
    );
  }

  try {
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: text }],
    });

    await ctx.reply(response.choices[0].message.content);
    
    await userRef.set({
      requests: userData.requests + 1,
      paid: userData.paid,
    }, { merge: true });
  } catch (error) {
    console.error(error);
    ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
bot.command('buy', async (ctx) => {
  const userId = ctx.from.id;
  const session = await Stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    line_items: [{
      price_data: {
        currency: 'usd',
        product_data: { 
          name: '–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø',
          description: '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ 30 –¥–Ω–µ–π'
        },
        unit_amount: 500,
      },
      quantity: 1,
    }],
    mode: 'payment',
    success_url: 'https://your-domain.com/success?session_id={CHECKOUT_SESSION_ID}',
    cancel_url: 'https://your-domain.com/cancel',
    metadata: { telegram_id: userId }
  });

  ctx.reply(
    'üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:',
    Markup.inlineKeyboard([
      Markup.button.url('–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å', session.url)
    ])
  );
});

// –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ Stripe Dashboard)
app.post('/webhook', async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = Stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === 'checkout.session.completed') {
    const session = event.data.object;
    const userId = session.metadata.telegram_id;

    await db.collection('users').doc(String(userId)).set({
      paid: true,
      premium_until: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // +30 –¥–Ω–µ–π
    }, { merge: true });
  }

  res.json({ received: true });
});

bot.launch();

// –î–ª—è Vercel
module.exports = bot.webhookCallback('/api');

const { Telegraf, Markup } = require('telegraf');

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const GPT_API_URL = 'https://free-unoficial-gpt4o-mini-api-g70n.onrender.com/chat';

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–ª—è –¥–µ–º–æ)
const users = new Map();

function initUser(userId) {
  if (!users.has(userId)) {
    users.set(userId, {
      requests: 0,
      isPremium: false
    });
  }
  return users.get(userId);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const menuKeyboard = Markup.keyboard([
  ['üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
  ['üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]).resize();

bot.start(async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${5 - user.requests}`,
    menuKeyboard
  );
});

bot.hears('üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', async (ctx) => {
  await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:');
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${user.requests} –∑–∞–ø—Ä.
    –°—Ç–∞—Ç—É—Å: ${user.isPremium ? '–ü—Ä–µ–º–∏—É–º üöÄ' : '–ë–∞–∑–æ–≤—ã–π ‚ö†Ô∏è'}`
  );
});

bot.hears('üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', async (ctx) => {
  const paymentMenu = Markup.inlineKeyboard([
    Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 299‚ÇΩ', 'https://example.com/payment'),
    Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'check_payment')
  ]);
  
  await ctx.reply(
    'üéÅ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞:\n' +
    '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n' +
    '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
    paymentMenu
  );
});

bot.action('check_payment', async (ctx) => {
  const user = initUser(ctx.from.id);
  user.isPremium = true; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ
  await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
  await ctx.reply('üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!');
});

bot.on('text', async (ctx) => {
  const user = initUser(ctx.from.id);
  
  if (!user.isPremium && user.requests >= 5) {
    return ctx.reply('üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
  }

  try {
    const response = await fetch(`${GPT_API_URL}/?query=${encodeURIComponent(ctx.message.text)}`, {
      method: 'GET',
      headers: { 'Accept': 'application/json' },
      timeout: 15000
    });
    
    if (!response.ok) throw new Error('API Error');
    
    const data = await response.json();
    user.requests++;
    
    await ctx.reply(data.response || 'ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç');
    
    if (!user.isPremium && 5 - user.requests <= 2) {
      await ctx.reply(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${5 - user.requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!`);
    }

  } catch (error) {
    console.error('Error:', error);
    await ctx.reply('‚è≥ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
  }
});

module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error(err);
    res.status(500).send('Error');
  }
};
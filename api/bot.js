const { Telegraf, Markup } = require('telegraf');
const tf = require('@tensorflow/tfjs-node');
const qna = require('@tensorflow-models/qna');
const fs = require('fs').promises;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –¥–ª—è –¥–µ–º–æ)
const users = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
let model, context;
async function initialize() {
  if (!model) {
    await tf.setBackend('tensorflow');
    await tf.ready();
    model = await qna.load();
    context = await fs.readFile('./public/context.txt', 'utf-8');
  }
}

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const menuKeyboard = Markup.keyboard([
  ['üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'üîÑ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã'],
  ['üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]).resize();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUser(userId) {
  if (!users.has(userId)) {
    users.set(userId, {
      requests: 0,
      isPremium: false
    });
  }
  return users.get(userId);
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å ${15 - user.requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.`,
    menuKeyboard
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã"
bot.hears('üîÑ –ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã', async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${user.requests}
    ‚Ä¢ –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å: ${user.isPremium ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}`
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
bot.hears('üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', async (ctx) => {
  const paymentKeyboard = Markup.inlineKeyboard([
    Markup.button.url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (500‚ÇΩ/–º–µ—Å)', 'https://example.com/pay'),
    Markup.button.callback('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', 'check_payment')
  ]);
  
  await ctx.reply(
    'üéü –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞:\n' +
    '‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n' +
    '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    paymentKeyboard
  );
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∞)
bot.action('check_payment', async (ctx) => {
  const user = initUser(ctx.from.id);
  user.isPremium = true;
  await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
  await ctx.reply('üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
bot.on('text', async (ctx) => {
  await initialize();
  const user = initUser(ctx.from.id);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
  if (!user.isPremium && user.requests >= 15) {
    return ctx.reply(
      'üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.',
      Markup.keyboard(['üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É']).resize()
    );
  }

  try {
    const answers = await model.findAnswers(ctx.message.text, context);
    user.requests++;
    
    const replyText = answers[0]?.text 
      ? `üìù –û—Ç–≤–µ—Ç: ${answers[0].text}`
      : '‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π';
    
    await ctx.reply(replyText);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
    if (!user.isPremium && 15 - user.requests <= 3) {
      await ctx.reply(
        `‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${15 - user.requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!`
      );
    }

  } catch (error) {
    console.error(error);
    await ctx.reply('‚è≥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
  }
});

module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error(err);
    res.status(500).send('Error');
  }
};
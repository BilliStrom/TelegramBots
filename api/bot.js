const { Telegraf, Markup } = require('telegraf');
const fetch = require('node-fetch');

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const GPT_API_URL = 'https://free-unoficial-gpt4o-mini-api-g70n.onrender.com/chat';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  free_requests: 5,
  premium_price: 299,
  api_timeout: 20000,
  backup_api: 'https://api.example.com/backup' // –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π API
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)
const users = new Map();

const initUser = (userId) => {
  if (!users.has(userId)) {
    users.set(userId, {
      requests: 0,
      isPremium: false,
      lastRequest: null
    });
  }
  return users.get(userId);
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const menuKeyboard = Markup.keyboard([
  ['üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
  ['üíé –ü—Ä–µ–º–∏—É–º', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]).resize();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
const logError = (error, ctx) => {
  console.error(`[ERROR] ${new Date().toISOString()} User: ${ctx.from.id}`, error);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
const checkAPIHealth = async () => {
  try {
    const response = await fetch(GPT_API_URL, { timeout: 5000 });
    return response.ok;
  } catch (e) {
    return false;
  }
};

bot.start(async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${config.free_requests - user.requests}`,
    menuKeyboard
  );
});

bot.hears('üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', async (ctx) => {
  await ctx.reply('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:');
});

bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
  const user = initUser(ctx.from.id);
  await ctx.reply(
    `üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
    `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${user.requests}\n` +
    `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${user.isPremium ? '–ü—Ä–µ–º–∏—É–º ‚úÖ' : '–ë–∞–∑–æ–≤—ã–π ‚ö†Ô∏è'}\n` +
    `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: ${user.lastRequest || '–µ—â–µ –Ω–µ –±—ã–ª–æ'}`
  );
});

bot.hears('üíé –ü—Ä–µ–º–∏—É–º', async (ctx) => {
  const paymentMenu = Markup.inlineKeyboard([
    Markup.button.url(`üí≥ –ö—É–ø–∏—Ç—å (${config.premium_price}‚ÇΩ)`, 'https://example.com/payment'),
    Markup.button.callback('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', 'check_payment')
  ]);
  
  await ctx.reply(
    `üéÅ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n` +
    `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n` +
    `‚Ä¢ –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n` +
    `‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏`,
    paymentMenu
  );
});

bot.action('check_payment', async (ctx) => {
  const user = initUser(ctx.from.id);
  user.isPremium = true;
  await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
  await ctx.reply('üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø!');
});

bot.on('text', async (ctx) => {
  const user = initUser(ctx.from.id);
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
  if (!user.isPremium && user.requests >= config.free_requests) {
    return ctx.reply('üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.');
  }

  // –ê–Ω—Ç–∏—Ñ–ª—É–¥
  if (user.lastRequest && (now - user.lastRequest) < 2000) {
    return ctx.reply('‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã.');
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    const isHealthy = await checkAPIHealth();
    const apiUrl = isHealthy ? GPT_API_URL : config.backup_api;

    const response = await fetch(`${apiUrl}/?query=${encodeURIComponent(ctx.message.text)}`, {
      method: 'GET',
      headers: { 'Accept': 'application/json' },
      timeout: config.api_timeout
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data?.response) {
      throw new Error('Invalid API Response');
    }

    user.requests++;
    user.lastRequest = now;
    
    await ctx.reply(data.response);
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
    if (!user.isPremium && (config.free_requests - user.requests) <= 2) {
      await ctx.reply(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${config.free_requests - user.requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!`);
    }

  } catch (error) {
    logError(error, ctx);
    await ctx.reply('üòû –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

module.exports = async (req, res) => {
  try {
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error('Fatal Error:', err);
    res.status(500).send('Internal Server Error');
  }
};